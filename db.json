{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":0,"renderable":1},{"_id":"themes/fexo/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":0,"renderable":1},{"_id":"themes/fexo/source/sass/styles.scss","path":"sass/styles.scss","modified":0,"renderable":1},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":0,"renderable":1},{"_id":"themes/fexo/source/sass/component/prev-net.scss","path":"sass/component/prev-net.scss","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/fexo/.csscomb.json","hash":"0bff596879c2556634b9a92abe5b1606dc77fd1c","modified":1486187677000},{"_id":"themes/fexo/.gitignore","hash":"32223fbe296f8e3026c689bad8f3dea9d0fcbb43","modified":1486187677000},{"_id":"themes/fexo/README.md","hash":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1486187677000},{"_id":"themes/fexo/LICENSE","hash":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1486187677000},{"_id":"themes/fexo/_config.yml","hash":"6e10654001d37a9b7af6ad6a27d439f003017c48","modified":1488094732178},{"_id":"themes/fexo/gulpfile.js","hash":"5995b9c4e8e18d1670ad30b2881d49fa17e56415","modified":1486187677000},{"_id":"themes/fexo/package.json","hash":"351b5b21f5ea8851103ee1891248be43f3c27027","modified":1486187677000},{"_id":"source/_posts/ByteArrayInputStream.md","hash":"25cf9f17972ee959a03065fb6ebe2d584e3c7213","modified":1488290735476},{"_id":"source/_posts/Java-IO.md","hash":"27dc430491e1b3fa4b5190e6f86e81dc226a3d75","modified":1488203282783},{"_id":"source/_posts/TensorFlow.md","hash":"8eb3379b2fb939bb15235de8473e03f3a76aaa43","modified":1488100891052},{"_id":"source/_posts/Ubuntu-Android-NDK.md","hash":"fd82bd4d8a3e111e529dce22843b6b308b5588df","modified":1488100282469},{"_id":"source/_posts/Ubuntun-set-environment.md","hash":"837dc4ebf15f8aca9b876f89b42ac1436d91545e","modified":1488098282343},{"_id":"source/about/index.md","hash":"bc1e33abe97db8273e6b12f35bb578534dde20a2","modified":1488094068052},{"_id":"source/category/index.md","hash":"e599870f1d023dfddd75e5e89fd1724b6b12aa74","modified":1488094068052},{"_id":"source/project/index.md","hash":"fdf7ecc245ccfc593aa5b10cfb58ca003f600420","modified":1488094068052},{"_id":"source/tag/index.md","hash":"7de81a09ff31847ac8131fac8ab7a0ebe1466ad8","modified":1488094068052},{"_id":"themes/fexo/languages/default.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1486187677000},{"_id":"themes/fexo/languages/en.yml","hash":"b58364c7dfac61eddd64510f74ca7516da48f0cf","modified":1486187677000},{"_id":"themes/fexo/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1486187677000},{"_id":"themes/fexo/languages/zh-CN.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1486187677000},{"_id":"themes/fexo/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1486187677000},{"_id":"themes/fexo/layout/about.ejs","hash":"f1f06842f3fac2c7dd74811722431c5720e6cf8d","modified":1486187677000},{"_id":"themes/fexo/layout/archive.ejs","hash":"9c22251c328e937c444a9f5d4b324f97a78d324f","modified":1486187677000},{"_id":"themes/fexo/layout/category.ejs","hash":"6d7f43a3d3180e7eb120601bae701664911cf8e6","modified":1486187677000},{"_id":"themes/fexo/layout/link.ejs","hash":"0144bdb1bc5f19763535b79b3302bf85bc0afbff","modified":1486187677000},{"_id":"themes/fexo/layout/post.ejs","hash":"8cf15be489f8f3c11ac0215c16cbce36c854555f","modified":1486187677000},{"_id":"themes/fexo/layout/index.ejs","hash":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1486187677000},{"_id":"themes/fexo/layout/layout.ejs","hash":"ae485be0f6c0c431245e0cac21dc109c9d0125e8","modified":1486187677000},{"_id":"themes/fexo/layout/project.ejs","hash":"6648041e1319c8ee3e16c882b33bb457c67a9527","modified":1486187677000},{"_id":"themes/fexo/layout/search.ejs","hash":"8c6fc59bed1facf14dd6a48bdf8dd44452583f4d","modified":1486187677000},{"_id":"themes/fexo/layout/tag.ejs","hash":"2cadf0acdf7c8e76bd4f27c6d7fe97eefe42ef5e","modified":1486187677000},{"_id":"source/_posts/ByteArrayInputStream/bytearrayinputstream.png","hash":"aa59865c33dc709e165e71648023bc1d10727bac","modified":1488285825076},{"_id":"source/_posts/ByteArrayInputStream/fileinputstream.png","hash":"79c7af044556b5e06f9f41eeec6d1cbb2ec9502c","modified":1488287086478},{"_id":"source/_posts/Java-IO/file.jpg","hash":"16336b5cb2d6f7289d3eb4b3f907d5c01c6cb086","modified":1488202668088},{"_id":"source/_posts/Java-IO/inputstream.png","hash":"6f20a0c7618b3450ec0d72b7963d4e4e5694866c","modified":1488200975016},{"_id":"source/_posts/Java-IO/outputstream.png","hash":"82e721832ed52195efadd4234ce0b9c6aa86d302","modified":1488202266022},{"_id":"source/_posts/Java-IO/reader.png","hash":"5f98479726b09c0891339a954bbe2805dc956912","modified":1488202477846},{"_id":"source/_posts/Java-IO/socket.jpg","hash":"e4443287e9fda0a9590ff0fd6db152b82a3d7f6c","modified":1488202905676},{"_id":"source/_posts/Java-IO/writer.png","hash":"e1654dde9d608d741725ee21810a98ae561d520b","modified":1488202466944},{"_id":"themes/fexo/layout/_partial/article.ejs","hash":"ab0adc8f18a96eab18bb584233c0e8d4ddba71fc","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","hash":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/baidu-push.ejs","hash":"6950255d74efac8811d5b05d0d7a263c3c96486d","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/head.ejs","hash":"794916e761ea82fb606a2173af68e9bf524f6efb","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/home.ejs","hash":"225b8a001c7aace46f2b39676e968e7cba9a4277","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/load-script.ejs","hash":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/style.ejs","hash":"d1e80d7cf8b22929f5c6d8590eac38b069ea055d","modified":1486187677000},{"_id":"themes/fexo/source/css/styles.css","hash":"c4d6a1f5403cf2fe2674ba82eb2b32b0fd7dfdb8","modified":1486187677000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1486187677000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1486187677000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1486187677000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1486187677000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1486187677000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1486187677000},{"_id":"themes/fexo/source/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1486187677000},{"_id":"themes/fexo/source/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1486187677000},{"_id":"themes/fexo/source/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1486187677000},{"_id":"themes/fexo/source/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1486187677000},{"_id":"themes/fexo/source/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1486187677000},{"_id":"themes/fexo/source/images/avatar.jpg","hash":"82847252dc8b5408437a50a35f07b4fcbc240335","modified":1487837802788},{"_id":"themes/fexo/source/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1486187677000},{"_id":"themes/fexo/source/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1486187677000},{"_id":"themes/fexo/source/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1486187677000},{"_id":"themes/fexo/source/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1486187677000},{"_id":"themes/fexo/source/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1486187677000},{"_id":"themes/fexo/source/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1486187677000},{"_id":"themes/fexo/source/sass/_animate.scss","hash":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1486187677000},{"_id":"themes/fexo/source/sass/_base.scss","hash":"83f01dbe82e47ce781c6e7eb8a793d95d97e168b","modified":1486187677000},{"_id":"themes/fexo/source/sass/_common.scss","hash":"b1fc97d6d24a92a9a7a9d39be4fe844f5c0f6d44","modified":1486187677000},{"_id":"themes/fexo/source/sass/_fontello.scss","hash":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1486187677000},{"_id":"themes/fexo/source/sass/_fonts.scss","hash":"10e188d379782ae2ee10427544919557036d0137","modified":1486187677000},{"_id":"themes/fexo/source/sass/_highlight-js.scss","hash":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1486187677000},{"_id":"themes/fexo/source/sass/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1486187677000},{"_id":"themes/fexo/source/sass/_type.scss","hash":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1486187677000},{"_id":"themes/fexo/source/sass/_variable.scss","hash":"7b05581ef035a88bd1191914ff992103c7812bdf","modified":1486187677000},{"_id":"themes/fexo/source/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1486187677000},{"_id":"themes/fexo/source/css/styles.css.map","hash":"8153b0247617810c1333dbd40840975e0b966ecb","modified":1486187677000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_tag.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","hash":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","hash":"f18e08e5c8718d5cd6672fc01e25ba457db0a385","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/date.ejs","hash":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/category.ejs","hash":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","hash":"043ed1e5625860696fe42bb88c998668faf71449","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","hash":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/donation.ejs","hash":"65bf93ad8e149033e6f93d673cc85ee223615589","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/gentie.ejs","hash":"9b78a138fb93a71b481ab25c8dea2e082e5e9d6c","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/duoshuo.ejs","hash":"b732200315e4c82e92bc7bd0ad33eb171d246e26","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","hash":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","hash":"14bad32082d87d7eeb45c0e9079e72f0ae65dbf4","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/prev-net.ejs","hash":"d1cb2e61814bcbd25ccb1628f99b18316e029892","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","hash":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","hash":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","hash":"8edceb2fd6c770691bd5cf4a35236c1def8410fe","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","hash":"d648ea91ec9dc72bca80d70fbb66f7655bd0ea12","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","hash":"000be428e925f5595af29eeba37ba6111f7f6511","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","hash":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","hash":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/title.ejs","hash":"e2fcdd904123186648513cfca4c7ad04921d2d57","modified":1486187677000},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","hash":"fcfcccc5b231c4050f1a665b70f7738f9d070541","modified":1486187677000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1486187677000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_comments.scss","hash":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_back-top.scss","hash":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_category-box.scss","hash":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_donation.scss","hash":"172a3d5f747ba028d7e10e6f03ebc1db4d487a54","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_hint.scss","hash":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_index.scss","hash":"a741a0bfb47d0acdef12cdeb968c104bb002f86d","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_item-title.scss","hash":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","hash":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_modal.scss","hash":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_page-header.scss","hash":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_item-post.scss","hash":"1fb2e9be2d2edbb538cfbce7c80d5847f88e2f05","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_table.scss","hash":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_item-year.scss","hash":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_list-post.scss","hash":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_pagination.scss","hash":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","hash":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/prev-net.scss","hash":"2a5befab6cef93c9023a548422d5af4ab614f84d","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_toc.scss","hash":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_archive.scss","hash":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","hash":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1486187677000},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","hash":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_about.scss","hash":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_category.scss","hash":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_home.scss","hash":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_index.scss","hash":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_link.scss","hash":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_post.scss","hash":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_project.scss","hash":"bcbaded3d378bbaa1497f4c3843994ea589f3149","modified":1486187677000},{"_id":"themes/fexo/source/sass/pages/_search.scss","hash":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1486187677000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1486187677000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1486187677000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1486187677000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1486187677000},{"_id":"public/about/index.html","hash":"e382b83109bf3dbf8b0bb34aee28a5fef8b092da","modified":1488287497315},{"_id":"public/category/index.html","hash":"3a304b24d70402d852b7f83fc354e006bc6a3fd7","modified":1488287497322},{"_id":"public/project/index.html","hash":"18fed8eaffd86cf2db8628925471471b29ad950b","modified":1488287497324},{"_id":"public/tag/index.html","hash":"3a2afe86ba63ac9d7f5fecc90983e90fae2c2b30","modified":1488287497324},{"_id":"public/2017/02/26/TensorFlow/index.html","hash":"b408623e41cd47b13deb452aa2c15f2f1ef01693","modified":1488287497324},{"_id":"public/2017/02/26/Ubuntu-Android-NDK/index.html","hash":"aca3837e69d96cd3b36e1a32310a4628b7d8f6ad","modified":1488287497324},{"_id":"public/2017/02/26/Ubuntun-set-environment/index.html","hash":"2fbe60a1644ac79148be140cb691418df016d744","modified":1488287497324},{"_id":"public/categories/TensorFlow-Android/index.html","hash":"4bc6ce0cc46920fc9826b0605c79e37e3b642274","modified":1488287497324},{"_id":"public/categories/Java-I-O/index.html","hash":"79d665b64d26e8812919f256a2f1df3a3adab3d8","modified":1488287497324},{"_id":"public/categories/Android/index.html","hash":"64c743161d91b4b39c3325d445ca956df89ec87d","modified":1488287497324},{"_id":"public/categories/Ubuntu/index.html","hash":"46cafa021210c4da80491b8297dfeccb7d3c160f","modified":1488287497324},{"_id":"public/tags/TensorFlow-Android/index.html","hash":"85f2086ea9fb6982ec6f5dba0b682857008f7058","modified":1488287497324},{"_id":"public/tags/Java-I-O/index.html","hash":"6335f4935a3a1fa611a72134a04bc8d66d371c22","modified":1488287497324},{"_id":"public/tags/Ubuntu-Android/index.html","hash":"249d9ae36148e32dd8fc1ca83d61d1e52f16cd6f","modified":1488287497324},{"_id":"public/tags/Ubuntu/index.html","hash":"de3e1487b5efbc55db468b47034898d92aa84a8b","modified":1488287497324},{"_id":"public/archives/index.html","hash":"1067866a2bbf74a28e397cbde0b362cc2a79fb39","modified":1488287497324},{"_id":"public/archives/2017/index.html","hash":"891e520a8fa3b522cd925955d80cc38bfb0dc1af","modified":1488287497324},{"_id":"public/archives/2017/02/index.html","hash":"6a15d8c4340d5a0cfffceabffa07ff5112822470","modified":1488287497324},{"_id":"public/index.html","hash":"f92cafbd73ed5003f7255fa47a5a1a9d8b5e0e9f","modified":1488287497324},{"_id":"public/2017/02/27/Java-IO/index.html","hash":"f6d6c5a376fb5ddc04e1c866c0ceedda14dfcc03","modified":1488287497324},{"_id":"public/categories/Java/index.html","hash":"e15386bd474fd21c1330ed1156a9e188d5ac4b3f","modified":1488287497350},{"_id":"public/tags/Java/index.html","hash":"392be1bdbbe674093fad6c875d838a0e0451a8ce","modified":1488287497356},{"_id":"public/2017/02/28/ByteArrayInputStream/index.html","hash":"21b683ab6907782a0820da40e1182cfbc109e2ef","modified":1488290740442},{"_id":"public/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1488287497361},{"_id":"public/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1488287497361},{"_id":"public/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1488287497361},{"_id":"public/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1488287497361},{"_id":"public/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1488287497361},{"_id":"public/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1488287497361},{"_id":"public/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1488287497361},{"_id":"public/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1488287497361},{"_id":"public/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1488287497361},{"_id":"public/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1488287497361},{"_id":"public/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1488287497361},{"_id":"public/images/avatar.jpg","hash":"82847252dc8b5408437a50a35f07b4fcbc240335","modified":1488287497361},{"_id":"public/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1488287497362},{"_id":"public/sass/component/prev-net.scss","hash":"2a5befab6cef93c9023a548422d5af4ab614f84d","modified":1488287497362},{"_id":"public/2017/02/27/Java-IO/file.jpg","hash":"16336b5cb2d6f7289d3eb4b3f907d5c01c6cb086","modified":1488287497362},{"_id":"public/2017/02/27/Java-IO/inputstream.png","hash":"6f20a0c7618b3450ec0d72b7963d4e4e5694866c","modified":1488287497362},{"_id":"public/2017/02/27/Java-IO/outputstream.png","hash":"82e721832ed52195efadd4234ce0b9c6aa86d302","modified":1488287497362},{"_id":"public/2017/02/27/Java-IO/reader.png","hash":"5f98479726b09c0891339a954bbe2805dc956912","modified":1488287497362},{"_id":"public/2017/02/27/Java-IO/socket.jpg","hash":"e4443287e9fda0a9590ff0fd6db152b82a3d7f6c","modified":1488287497362},{"_id":"public/2017/02/27/Java-IO/writer.png","hash":"e1654dde9d608d741725ee21810a98ae561d520b","modified":1488287497362},{"_id":"public/css/styles.css.map","hash":"8153b0247617810c1333dbd40840975e0b966ecb","modified":1488287497368},{"_id":"public/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1488287497370},{"_id":"public/2017/02/28/ByteArrayInputStream/bytearrayinputstream.png","hash":"aa59865c33dc709e165e71648023bc1d10727bac","modified":1488287497370},{"_id":"public/2017/02/28/ByteArrayInputStream/fileinputstream.png","hash":"79c7af044556b5e06f9f41eeec6d1cbb2ec9502c","modified":1488287497370},{"_id":"public/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1488287497374},{"_id":"public/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1488287497374},{"_id":"public/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1488287497374},{"_id":"public/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1488287497374},{"_id":"public/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1488287497375},{"_id":"public/css/styles.css","hash":"c4d6a1f5403cf2fe2674ba82eb2b32b0fd7dfdb8","modified":1488287497375},{"_id":"public/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488287497375},{"_id":"public/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1488287497375},{"_id":"public/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1488287497375},{"_id":"public/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1488287497378},{"_id":"public/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1488287497378},{"_id":"public/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1488287497378},{"_id":"public/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1488287497381},{"_id":"source/_posts/ByteArrayInputStream/filterinputstream.png","hash":"6c54a4b8ca42bcf6a7f99fb8b74713443a8d3e78","modified":1488290155013},{"_id":"public/2017/02/28/ByteArrayInputStream/filterinputstream.png","hash":"6c54a4b8ca42bcf6a7f99fb8b74713443a8d3e78","modified":1488290740443}],"Category":[{"name":"Java","_id":"cizpjy5xs0002wp2ds59onx7y"},{"name":"TensorFlow,Android","_id":"cizpjy5xz0006wp2dyom2pj4n"},{"name":"Java,I/O","_id":"cizpjy5y4000awp2d9w9rv82k"},{"name":"Android","_id":"cizpjy5y5000ewp2dujacqqq9"},{"name":"Ubuntu","_id":"cizpjy5z6000nwp2d9un3u13x"}],"Data":[],"Page":[{"title":"about","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ncomments: false\n---\n","date":"2017-02-26T07:27:48.052Z","updated":"2017-02-26T07:27:48.052Z","path":"about/index.html","_id":"cizpjy5z0000lwp2d8dj1g3ta","content":"","excerpt":"","more":""},{"title":"category","layout":"category","comments":0,"_content":"","source":"category/index.md","raw":"---\ntitle:  category\nlayout:  category\ncomments: false\n---\n","date":"2017-02-26T07:27:48.052Z","updated":"2017-02-26T07:27:48.052Z","path":"category/index.html","_id":"cizpjy5z2000mwp2dsprqs6up","content":"","excerpt":"","more":""},{"title":"project","layout":"project","comments":0,"_content":"","source":"project/index.md","raw":"---\ntitle: project\nlayout: project\ncomments: false\n---\n","date":"2017-02-26T07:27:48.052Z","updated":"2017-02-26T07:27:48.052Z","path":"project/index.html","_id":"cizpjy5z6000pwp2dmnsj16l9","content":"","excerpt":"","more":""},{"title":"tag","layout":"tag","comments":0,"_content":"\n","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\ncomments: false\n---\n\n","date":"2017-02-26T07:27:48.052Z","updated":"2017-02-26T07:27:48.052Z","path":"tag/index.html","_id":"cizpjy5z7000qwp2d85b94qvq","content":"","excerpt":"","more":""}],"Post":[{"title":"Java I/O系列之InputStream","_content":"## 1.ByteArrayInputStream\nByteArrayInputStream是字节数组输入流，用于在内存中创建一个字节数组缓冲区，从输入流读取的数据保存在字节数组的缓冲区中。\n\n### 1.1 结构\n{% asset_img bytearrayinputstream.png ByteArrayInputStream结构图 %}\n\n|方法|描述| \n|--|--|\n|public int read()|从此输入流中读取下一个数据字节。|\n|public int read(byte[] r, int off, int len)|将最多 len 个数据字节从此输入流读入字节数组。|\n|public int available()|返回可不发生阻塞地从此输入流读取的字节数。| \n|public void mark(int read)|设置流中的当前标记位置。|\n|public long skip(long n)|从此输入流中跳过 n 个输入字节。|\n \n 注意：\n\n* new一个ByteArrayInputStream的对象，需要一个byte数组作为缓冲区\n* ByteArrayInputStream的close方法为空，所以关闭ByteArrayInputStream无效，因此此类的方法在关闭此流后仍可调用，而不会抛异常(IOException)\n \n## 2.FileInputStream\nFileInputStream是文件输入流，用于读取文件中的字节。\n\n### 2.1结构\n{% asset_img fileinputstream.png FileInputStream结构图 %}\n\n|方法|描述| \n|--|--|\n|public int read()|从输入流中读取下一个数据字节。|\n|public int read(byte[] r, int off, int len)|将最多 len 个数据字节从此输入流读入字节数组。|\n|public int available()|返回可不发生阻塞地从此输入流读取的字节数。| \n|public long skip(long n)|从此输入流中跳过 n 个输入字节。|\n|public final FileDescriptor getFD() ||\n|public FileChannel getChannel()||\n\n## 3.FilterInputStream\nFilterInputStream 的作用是用来“封装其它的输入流，并为它们提供额外的功能”。它的常用的子类有InflaterInputStream、BufferedInputStream、DataInputStream和PrintStream。\n\n* BufferedInputStream的作用就是为“输入流提供缓冲功能，以及mark()和reset()功能”。\n\n* DataInputStream 是用来装饰其它输入流，它“允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型”。\n\n* PrintStream 是用来装饰其它输出流。它能为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。\n\n### 3.1 结构\n{% asset_img filterinputstream.png FilterInputStream的结构图 %}\n\n## 4.ObjectInputStream\nObjectInputStream用来序列化。ObjectInputStream 确保从流创建的图形中所有对象的类型与 Java 虚拟机中的显示的类相匹配。使用标准机制按需加载类。\n\nObjectOutputStream 和 ObjectInputStream 分别与 FileOutputStream 和 FileInputStream 一起使用时，可以为应用程序提供对对象图形的持久性存储。ObjectInputStream 用于恢复那些以前序列化的对象。其他用途包括使用套接字流在主机之间传递对象，或者用于编组和解组远程通信系统中的实参和形参。\n\nObjectOutputStream可以把对象直接存入到文件中,然后利用ObjectInputStream读取文件还原成对象,前提是该对象实现了Serializable接口.由于ObjectInputStream无法判断文件流中对象的数量,所以我们在循环读取的时候,只好写个死循环,然后捕捉EOFException异常,来实现把所有对象读进来.也可以在写入文件时,把所有对象存进ArrayList,然后把这个ArrayList写入文件,这样就不需要判断对象数量了.\n\n```\n需要实现 java.io.Serializable 或 java.io.Externalizable的接口 \n```\n## 5.PipedInputStream\n在java中，PipedOutputStream和PipedInputStream分别是管道输出流和管道输入流。\n它们的作用是让多线程可以通过管道进行线程间的通讯。在使用管道通信时，必须将PipedOutputStream和PipedInputStream配套使用。\n使用管道通信时，大致的流程是：我们在线程A中向PipedOutputStream中写入数据，这些数据会自动的发送到与PipedOutputStream对应的PipedInputStream中，进而存储在PipedInputStream的缓冲中；此时，线程B通过读取PipedInputStream中的数据。就可以实现，线程A和线程B的通信。\n","source":"_posts/ByteArrayInputStream.md","raw":"---\ntitle: Java I/O系列之InputStream\ncategories: Java\ntags: Java\n---\n## 1.ByteArrayInputStream\nByteArrayInputStream是字节数组输入流，用于在内存中创建一个字节数组缓冲区，从输入流读取的数据保存在字节数组的缓冲区中。\n\n### 1.1 结构\n{% asset_img bytearrayinputstream.png ByteArrayInputStream结构图 %}\n\n|方法|描述| \n|--|--|\n|public int read()|从此输入流中读取下一个数据字节。|\n|public int read(byte[] r, int off, int len)|将最多 len 个数据字节从此输入流读入字节数组。|\n|public int available()|返回可不发生阻塞地从此输入流读取的字节数。| \n|public void mark(int read)|设置流中的当前标记位置。|\n|public long skip(long n)|从此输入流中跳过 n 个输入字节。|\n \n 注意：\n\n* new一个ByteArrayInputStream的对象，需要一个byte数组作为缓冲区\n* ByteArrayInputStream的close方法为空，所以关闭ByteArrayInputStream无效，因此此类的方法在关闭此流后仍可调用，而不会抛异常(IOException)\n \n## 2.FileInputStream\nFileInputStream是文件输入流，用于读取文件中的字节。\n\n### 2.1结构\n{% asset_img fileinputstream.png FileInputStream结构图 %}\n\n|方法|描述| \n|--|--|\n|public int read()|从输入流中读取下一个数据字节。|\n|public int read(byte[] r, int off, int len)|将最多 len 个数据字节从此输入流读入字节数组。|\n|public int available()|返回可不发生阻塞地从此输入流读取的字节数。| \n|public long skip(long n)|从此输入流中跳过 n 个输入字节。|\n|public final FileDescriptor getFD() ||\n|public FileChannel getChannel()||\n\n## 3.FilterInputStream\nFilterInputStream 的作用是用来“封装其它的输入流，并为它们提供额外的功能”。它的常用的子类有InflaterInputStream、BufferedInputStream、DataInputStream和PrintStream。\n\n* BufferedInputStream的作用就是为“输入流提供缓冲功能，以及mark()和reset()功能”。\n\n* DataInputStream 是用来装饰其它输入流，它“允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型”。\n\n* PrintStream 是用来装饰其它输出流。它能为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。\n\n### 3.1 结构\n{% asset_img filterinputstream.png FilterInputStream的结构图 %}\n\n## 4.ObjectInputStream\nObjectInputStream用来序列化。ObjectInputStream 确保从流创建的图形中所有对象的类型与 Java 虚拟机中的显示的类相匹配。使用标准机制按需加载类。\n\nObjectOutputStream 和 ObjectInputStream 分别与 FileOutputStream 和 FileInputStream 一起使用时，可以为应用程序提供对对象图形的持久性存储。ObjectInputStream 用于恢复那些以前序列化的对象。其他用途包括使用套接字流在主机之间传递对象，或者用于编组和解组远程通信系统中的实参和形参。\n\nObjectOutputStream可以把对象直接存入到文件中,然后利用ObjectInputStream读取文件还原成对象,前提是该对象实现了Serializable接口.由于ObjectInputStream无法判断文件流中对象的数量,所以我们在循环读取的时候,只好写个死循环,然后捕捉EOFException异常,来实现把所有对象读进来.也可以在写入文件时,把所有对象存进ArrayList,然后把这个ArrayList写入文件,这样就不需要判断对象数量了.\n\n```\n需要实现 java.io.Serializable 或 java.io.Externalizable的接口 \n```\n## 5.PipedInputStream\n在java中，PipedOutputStream和PipedInputStream分别是管道输出流和管道输入流。\n它们的作用是让多线程可以通过管道进行线程间的通讯。在使用管道通信时，必须将PipedOutputStream和PipedInputStream配套使用。\n使用管道通信时，大致的流程是：我们在线程A中向PipedOutputStream中写入数据，这些数据会自动的发送到与PipedOutputStream对应的PipedInputStream中，进而存储在PipedInputStream的缓冲中；此时，线程B通过读取PipedInputStream中的数据。就可以实现，线程A和线程B的通信。\n","slug":"ByteArrayInputStream","published":1,"date":"2017-02-28T14:05:35.476Z","updated":"2017-02-28T14:05:35.476Z","_id":"cizpjy5xk0000wp2dg6yjk6tw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-ByteArrayInputStream\"><a href=\"#1-ByteArrayInputStream\" class=\"headerlink\" title=\"1.ByteArrayInputStream\"></a>1.ByteArrayInputStream</h2><p>ByteArrayInputStream是字节数组输入流，用于在内存中创建一个字节数组缓冲区，从输入流读取的数据保存在字节数组的缓冲区中。</p>\n<h3 id=\"1-1-结构\"><a href=\"#1-1-结构\" class=\"headerlink\" title=\"1.1 结构\"></a>1.1 结构</h3><img src=\"/2017/02/28/ByteArrayInputStream/bytearrayinputstream.png\" alt=\"ByteArrayInputStream结构图\" title=\"ByteArrayInputStream结构图\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public int read()</td>\n<td>从此输入流中读取下一个数据字节。</td>\n</tr>\n<tr>\n<td>public int read(byte[] r, int off, int len)</td>\n<td>将最多 len 个数据字节从此输入流读入字节数组。</td>\n</tr>\n<tr>\n<td>public int available()</td>\n<td>返回可不发生阻塞地从此输入流读取的字节数。</td>\n</tr>\n<tr>\n<td>public void mark(int read)</td>\n<td>设置流中的当前标记位置。</td>\n</tr>\n<tr>\n<td>public long skip(long n)</td>\n<td>从此输入流中跳过 n 个输入字节。</td>\n</tr>\n</tbody>\n</table>\n<p> 注意：</p>\n<ul>\n<li>new一个ByteArrayInputStream的对象，需要一个byte数组作为缓冲区</li>\n<li>ByteArrayInputStream的close方法为空，所以关闭ByteArrayInputStream无效，因此此类的方法在关闭此流后仍可调用，而不会抛异常(IOException)</li>\n</ul>\n<h2 id=\"2-FileInputStream\"><a href=\"#2-FileInputStream\" class=\"headerlink\" title=\"2.FileInputStream\"></a>2.FileInputStream</h2><p>FileInputStream是文件输入流，用于读取文件中的字节。</p>\n<h3 id=\"2-1结构\"><a href=\"#2-1结构\" class=\"headerlink\" title=\"2.1结构\"></a>2.1结构</h3><img src=\"/2017/02/28/ByteArrayInputStream/fileinputstream.png\" alt=\"FileInputStream结构图\" title=\"FileInputStream结构图\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public int read()</td>\n<td>从输入流中读取下一个数据字节。</td>\n</tr>\n<tr>\n<td>public int read(byte[] r, int off, int len)</td>\n<td>将最多 len 个数据字节从此输入流读入字节数组。</td>\n</tr>\n<tr>\n<td>public int available()</td>\n<td>返回可不发生阻塞地从此输入流读取的字节数。</td>\n</tr>\n<tr>\n<td>public long skip(long n)</td>\n<td>从此输入流中跳过 n 个输入字节。</td>\n</tr>\n<tr>\n<td>public final FileDescriptor getFD()</td>\n<td></td>\n</tr>\n<tr>\n<td>public FileChannel getChannel()</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-FilterInputStream\"><a href=\"#3-FilterInputStream\" class=\"headerlink\" title=\"3.FilterInputStream\"></a>3.FilterInputStream</h2><p>FilterInputStream 的作用是用来“封装其它的输入流，并为它们提供额外的功能”。它的常用的子类有InflaterInputStream、BufferedInputStream、DataInputStream和PrintStream。</p>\n<ul>\n<li><p>BufferedInputStream的作用就是为“输入流提供缓冲功能，以及mark()和reset()功能”。</p>\n</li>\n<li><p>DataInputStream 是用来装饰其它输入流，它“允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型”。</p>\n</li>\n<li><p>PrintStream 是用来装饰其它输出流。它能为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。</p>\n</li>\n</ul>\n<h3 id=\"3-1-结构\"><a href=\"#3-1-结构\" class=\"headerlink\" title=\"3.1 结构\"></a>3.1 结构</h3><img src=\"/2017/02/28/ByteArrayInputStream/filterinputstream.png\" alt=\"FilterInputStream的结构图\" title=\"FilterInputStream的结构图\">\n<h2 id=\"4-ObjectInputStream\"><a href=\"#4-ObjectInputStream\" class=\"headerlink\" title=\"4.ObjectInputStream\"></a>4.ObjectInputStream</h2><p>ObjectInputStream用来序列化。ObjectInputStream 确保从流创建的图形中所有对象的类型与 Java 虚拟机中的显示的类相匹配。使用标准机制按需加载类。</p>\n<p>ObjectOutputStream 和 ObjectInputStream 分别与 FileOutputStream 和 FileInputStream 一起使用时，可以为应用程序提供对对象图形的持久性存储。ObjectInputStream 用于恢复那些以前序列化的对象。其他用途包括使用套接字流在主机之间传递对象，或者用于编组和解组远程通信系统中的实参和形参。</p>\n<p>ObjectOutputStream可以把对象直接存入到文件中,然后利用ObjectInputStream读取文件还原成对象,前提是该对象实现了Serializable接口.由于ObjectInputStream无法判断文件流中对象的数量,所以我们在循环读取的时候,只好写个死循环,然后捕捉EOFException异常,来实现把所有对象读进来.也可以在写入文件时,把所有对象存进ArrayList,然后把这个ArrayList写入文件,这样就不需要判断对象数量了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">需要实现 java.io.Serializable 或 java.io.Externalizable的接口</div></pre></td></tr></table></figure>\n<h2 id=\"5-PipedInputStream\"><a href=\"#5-PipedInputStream\" class=\"headerlink\" title=\"5.PipedInputStream\"></a>5.PipedInputStream</h2><p>在java中，PipedOutputStream和PipedInputStream分别是管道输出流和管道输入流。<br>它们的作用是让多线程可以通过管道进行线程间的通讯。在使用管道通信时，必须将PipedOutputStream和PipedInputStream配套使用。<br>使用管道通信时，大致的流程是：我们在线程A中向PipedOutputStream中写入数据，这些数据会自动的发送到与PipedOutputStream对应的PipedInputStream中，进而存储在PipedInputStream的缓冲中；此时，线程B通过读取PipedInputStream中的数据。就可以实现，线程A和线程B的通信。</p>\n","excerpt":"","more":"<h2 id=\"1-ByteArrayInputStream\"><a href=\"#1-ByteArrayInputStream\" class=\"headerlink\" title=\"1.ByteArrayInputStream\"></a>1.ByteArrayInputStream</h2><p>ByteArrayInputStream是字节数组输入流，用于在内存中创建一个字节数组缓冲区，从输入流读取的数据保存在字节数组的缓冲区中。</p>\n<h3 id=\"1-1-结构\"><a href=\"#1-1-结构\" class=\"headerlink\" title=\"1.1 结构\"></a>1.1 结构</h3><img src=\"/2017/02/28/ByteArrayInputStream/bytearrayinputstream.png\" alt=\"ByteArrayInputStream结构图\" title=\"ByteArrayInputStream结构图\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public int read()</td>\n<td>从此输入流中读取下一个数据字节。</td>\n</tr>\n<tr>\n<td>public int read(byte[] r, int off, int len)</td>\n<td>将最多 len 个数据字节从此输入流读入字节数组。</td>\n</tr>\n<tr>\n<td>public int available()</td>\n<td>返回可不发生阻塞地从此输入流读取的字节数。</td>\n</tr>\n<tr>\n<td>public void mark(int read)</td>\n<td>设置流中的当前标记位置。</td>\n</tr>\n<tr>\n<td>public long skip(long n)</td>\n<td>从此输入流中跳过 n 个输入字节。</td>\n</tr>\n</tbody>\n</table>\n<p> 注意：</p>\n<ul>\n<li>new一个ByteArrayInputStream的对象，需要一个byte数组作为缓冲区</li>\n<li>ByteArrayInputStream的close方法为空，所以关闭ByteArrayInputStream无效，因此此类的方法在关闭此流后仍可调用，而不会抛异常(IOException)</li>\n</ul>\n<h2 id=\"2-FileInputStream\"><a href=\"#2-FileInputStream\" class=\"headerlink\" title=\"2.FileInputStream\"></a>2.FileInputStream</h2><p>FileInputStream是文件输入流，用于读取文件中的字节。</p>\n<h3 id=\"2-1结构\"><a href=\"#2-1结构\" class=\"headerlink\" title=\"2.1结构\"></a>2.1结构</h3><img src=\"/2017/02/28/ByteArrayInputStream/fileinputstream.png\" alt=\"FileInputStream结构图\" title=\"FileInputStream结构图\">\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public int read()</td>\n<td>从输入流中读取下一个数据字节。</td>\n</tr>\n<tr>\n<td>public int read(byte[] r, int off, int len)</td>\n<td>将最多 len 个数据字节从此输入流读入字节数组。</td>\n</tr>\n<tr>\n<td>public int available()</td>\n<td>返回可不发生阻塞地从此输入流读取的字节数。</td>\n</tr>\n<tr>\n<td>public long skip(long n)</td>\n<td>从此输入流中跳过 n 个输入字节。</td>\n</tr>\n<tr>\n<td>public final FileDescriptor getFD()</td>\n<td></td>\n</tr>\n<tr>\n<td>public FileChannel getChannel()</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-FilterInputStream\"><a href=\"#3-FilterInputStream\" class=\"headerlink\" title=\"3.FilterInputStream\"></a>3.FilterInputStream</h2><p>FilterInputStream 的作用是用来“封装其它的输入流，并为它们提供额外的功能”。它的常用的子类有InflaterInputStream、BufferedInputStream、DataInputStream和PrintStream。</p>\n<ul>\n<li><p>BufferedInputStream的作用就是为“输入流提供缓冲功能，以及mark()和reset()功能”。</p>\n</li>\n<li><p>DataInputStream 是用来装饰其它输入流，它“允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型”。</p>\n</li>\n<li><p>PrintStream 是用来装饰其它输出流。它能为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。</p>\n</li>\n</ul>\n<h3 id=\"3-1-结构\"><a href=\"#3-1-结构\" class=\"headerlink\" title=\"3.1 结构\"></a>3.1 结构</h3><img src=\"/2017/02/28/ByteArrayInputStream/filterinputstream.png\" alt=\"FilterInputStream的结构图\" title=\"FilterInputStream的结构图\">\n<h2 id=\"4-ObjectInputStream\"><a href=\"#4-ObjectInputStream\" class=\"headerlink\" title=\"4.ObjectInputStream\"></a>4.ObjectInputStream</h2><p>ObjectInputStream用来序列化。ObjectInputStream 确保从流创建的图形中所有对象的类型与 Java 虚拟机中的显示的类相匹配。使用标准机制按需加载类。</p>\n<p>ObjectOutputStream 和 ObjectInputStream 分别与 FileOutputStream 和 FileInputStream 一起使用时，可以为应用程序提供对对象图形的持久性存储。ObjectInputStream 用于恢复那些以前序列化的对象。其他用途包括使用套接字流在主机之间传递对象，或者用于编组和解组远程通信系统中的实参和形参。</p>\n<p>ObjectOutputStream可以把对象直接存入到文件中,然后利用ObjectInputStream读取文件还原成对象,前提是该对象实现了Serializable接口.由于ObjectInputStream无法判断文件流中对象的数量,所以我们在循环读取的时候,只好写个死循环,然后捕捉EOFException异常,来实现把所有对象读进来.也可以在写入文件时,把所有对象存进ArrayList,然后把这个ArrayList写入文件,这样就不需要判断对象数量了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">需要实现 java.io.Serializable 或 java.io.Externalizable的接口</div></pre></td></tr></table></figure>\n<h2 id=\"5-PipedInputStream\"><a href=\"#5-PipedInputStream\" class=\"headerlink\" title=\"5.PipedInputStream\"></a>5.PipedInputStream</h2><p>在java中，PipedOutputStream和PipedInputStream分别是管道输出流和管道输入流。<br>它们的作用是让多线程可以通过管道进行线程间的通讯。在使用管道通信时，必须将PipedOutputStream和PipedInputStream配套使用。<br>使用管道通信时，大致的流程是：我们在线程A中向PipedOutputStream中写入数据，这些数据会自动的发送到与PipedOutputStream对应的PipedInputStream中，进而存储在PipedInputStream的缓冲中；此时，线程B通过读取PipedInputStream中的数据。就可以实现，线程A和线程B的通信。</p>\n"},{"title":"TensorFlow","_content":"\n本篇讲一讲TensorFlow如何集成在Android上使用\n## TensorFlow在Android上的应用","source":"_posts/TensorFlow.md","raw":"---\ntitle: TensorFlow\ncategories: TensorFlow,Android\ntags: TensorFlow,Android\n---\n\n本篇讲一讲TensorFlow如何集成在Android上使用\n## TensorFlow在Android上的应用","slug":"TensorFlow","published":1,"date":"2017-02-26T09:21:31.052Z","updated":"2017-02-26T09:21:31.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjy5xq0001wp2dmrgrlubs","content":"<p>本篇讲一讲TensorFlow如何集成在Android上使用</p>\n<h2 id=\"TensorFlow在Android上的应用\"><a href=\"#TensorFlow在Android上的应用\" class=\"headerlink\" title=\"TensorFlow在Android上的应用\"></a>TensorFlow在Android上的应用</h2>","excerpt":"","more":"<p>本篇讲一讲TensorFlow如何集成在Android上使用</p>\n<h2 id=\"TensorFlow在Android上的应用\"><a href=\"#TensorFlow在Android上的应用\" class=\"headerlink\" title=\"TensorFlow在Android上的应用\"></a>TensorFlow在Android上的应用</h2>"},{"title":"Java I/O 系列第一篇","_content":"## 1.前言\n讲一讲Java I/O的一些事情。因为I/O问题很容易出现性能瓶颈，但我们在具体的开发过程中，却很少涉及到I/O之类的操作,那是因为涉及到的大部分I/O操作都被封装了起来，不被我们所感知，如：\n\n* 图片库\n* SharedPreferences\n\n还有一些应用场景：\n\n* 序列化与反序列化\n\n## 2.Java 的 I/O 类库的基本架构\nJava 的 I/O 操作类在包 java.io 下，大概有将近 80 个类，但是这些类大概可以分成四组，分别是：\n\n* 基于字节操作的 I/O 接口：InputStream 和 OutputStream\n* 基于字符操作的 I/O 接口：Writer 和 Reader\n* 基于磁盘操作的 I/O 接口：File\n* 基于网络操作的 I/O 接口：Socket\n\n前两组主要是根据传输数据的数据格式，后两组主要是根据传输数据的方式，虽然 Socket 类并不在 java.io 包下，但是我仍然把它们划分在一起。\n\n### 2.1 基于字节操作的 I/O 接口\n基于字节的 I/O 操作接口输入和输出分别是：InputStream 和 OutputStream。\n{% asset_img inputstream.png  InputStream 相关类层次结构%}\n\n{% asset_img outputstream.png OutputStream%}\n\n### 2.2基于字符的 I/O 操作接口\n不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符，所以 I/O 操作的都是字节而不是字符，但是为啥有操作字符的 I/O 接口呢？这是因为我们的程序中通常操作的数据都是以字符形式，为了操作方便当然要提供一个直接写字符的 I/O 接口，如此而已。基于字节的 I/O 操作接口读和写分别是：Reader 和 Writer。\n{% asset_img reader.png Reader相关类层次结构 %}\n\n{% asset_img writer.png Writer相关类层次结构 %}\n\n### 2.3 基于磁盘操作的 I/O 接口\n前面介绍了基本的 Java I/O 的操作接口，这些接口主要定义了如何操作数据，以及介绍了操作两种数据结构：字节和字符的方式。还有一个关键问题就是数据写到何处，其中一个主要方式就是将数据持久化到物理磁盘，下面将介绍如何将数据持久化到物理磁盘的过程。\n\n我们知道数据在磁盘的唯一最小描述就是文件，也就是说上层应用程序只能通过文件来操作磁盘上的数据，文件也是操作系统和磁盘驱动器交互的一个最小单元。值得注意的是 Java 中通常的 File 并不代表一个真实存在的文件对象，当你通过指定一个路径描述符时，它就会返回一个代表这个路径相关联的一个虚拟对象，这个可能是一个真实存在的文件或者是一个包含多个文件的目录。为何要这样设计？因为大部分情况下，我们并不关心这个文件是否真的存在，而是关心这个文件到底如何操作。例如我们手机里通常存了几百个朋友的电话号码，但是我们通常关心的是我有没有这个朋友的电话号码，或者这个电话号码是什么，但是这个电话号码到底能不能打通，我们并不是时时刻刻都去检查，而只有在真正要给他打电话时才会看这个电话能不能用。也就是使用这个电话记录要比打这个电话的次数多很多。\n何时真正会要检查一个文件存不存？就是在真正要读取这个文件时，例如 FileInputStream 类都是操作一个文件的接口，注意到在创建一个 FileInputStream 对象时，会创建一个 FileDescriptor 对象，其实这个对象就是真正代表一个存在的文件对象的描述，当我们在操作一个文件对象时可以通过 getFD() 方法获取真正操作的与底层操作系统关联的文件描述。例如可以调用 FileDescriptor.sync() 方法将操作系统缓存中的数据强制刷新到物理磁盘中。\n\n下面以清单 1 的程序为例，介绍下如何从磁盘读取一段文本字符。如下图所示：\n{% asset_img file.jpg 从磁盘读取文件%}\n\n### 2.4基于网络操作的 I/O 接口\nSocket 这个概念没有对应到一个具体的实体，它是描述计算机之间完成相互通信一种抽象功能。打个比方，可以把 Socket 比作为两个城市之间的交通工具，有了它，就可以在城市之间来回穿梭了。交通工具有多种，每种交通工具也有相应的交通规则。Socket 也一样，也有多种。大部分情况下我们使用的都是基于 TCP/IP 的流套接字，它是一种稳定的通信协议。\n下图是典型的基于 Socket 的通信的场景：\n\n{% asset_img socket.jpg Socket 通信示例 %}\n\n\n主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接，而建立 Socket 连接必须需要底层 TCP/IP 协议来建立 TCP 连接。建立 TCP 连接需要底层 IP 协议来寻址网络中的主机。我们知道网络层使用的 IP 协议可以帮助我们根据 IP 地址来找到目标主机，但是一台主机上可能运行着多个应用程序，如何才能与指定的应用程序通信就要通过 TCP 或 UPD 的地址也就是端口号来指定。这样就可以通过一个 Socket 实例唯一代表一个主机上的一个应用程序的通信链路了。\n#### 建立通信链路\n当客户端要与服务端通信，客户端首先要创建一个 Socket 实例，操作系统将为这个 Socket 实例分配一个没有被使用的本地端口号，并创建一个包含本地和远程地址和端口号的套接字数据结构，这个数据结构将一直保存在系统中直到这个连接关闭。在创建 Socket 实例的构造函数正确返回之前，将要进行 TCP 的三次握手协议，TCP 握手协议完成后，Socket 实例对象将创建完成，否则将抛出 IOException 错误。\n与之对应的服务端将创建一个 ServerSocket 实例，ServerSocket 创建比较简单只要指定的端口号没有被占用，一般实例创建都会成功，同时操作系统也会为 ServerSocket 实例创建一个底层数据结构，这个数据结构中包含指定监听的端口号和包含监听地址的通配符，通常情况下都是“*”即监听所有地址。之后当调用 accept() 方法时，将进入阻塞状态，等待客户端的请求。当一个新的请求到来时，将为这个连接创建一个新的套接字数据结构，该套接字数据的信息包含的地址和端口信息正是请求源地址和端口。这个新创建的数据结构将会关联到 ServerSocket 实例的一个未完成的连接数据结构列表中，注意这时服务端与之对应的 Socket 实例并没有完成创建，而要等到与客户端的三次握手完成后，这个服务端的 Socket 实例才会返回，并将这个 Socket 实例对应的数据结构从未完成列表中移到已完成列表中。所以 ServerSocket 所关联的列表中每个数据结构，都代表与一个客户端的建立的 TCP 连接。\n#### 数据传输\n传输数据是我们建立连接的主要目的，如何通过 Socket 传输数据，下面将详细介绍。\n当连接已经建立成功，服务端和客户端都会拥有一个 Socket 实例，每个 Socket 实例都有一个 InputStream 和 OutputStream，正是通过这两个对象来交换数据。同时我们也知道网络 I/O 都是以字节流传输的。当 Socket 对象创建时，操作系统将会为 InputStream 和 OutputStream 分别分配一定大小的缓冲区，数据的写入和读取都是通过这个缓存区完成的。写入端将数据写到 OutputStream 对应的 SendQ 队列中，当队列填满时，数据将被发送到另一端 InputStream 的 RecvQ 队列中，如果这时 RecvQ 已经满了，那么 OutputStream 的 write 方法将会阻塞直到 RecvQ 队列有足够的空间容纳 SendQ 发送的数据。值得特别注意的是，这个缓存区的大小以及写入端的速度和读取端的速度非常影响这个连接的数据传输效率，由于可能会发生阻塞，所以网络 I/O 与磁盘 I/O 在数据的写入和读取还要有一个协调的过程，如果两边同时传送数据时可能会产生死锁，在后面 NIO 部分将介绍避免这种情况。","source":"_posts/Java-IO.md","raw":"---\ntitle: Java I/O 系列第一篇\ncategories: Java,I/O\ntags: Java,I/O\n---\n## 1.前言\n讲一讲Java I/O的一些事情。因为I/O问题很容易出现性能瓶颈，但我们在具体的开发过程中，却很少涉及到I/O之类的操作,那是因为涉及到的大部分I/O操作都被封装了起来，不被我们所感知，如：\n\n* 图片库\n* SharedPreferences\n\n还有一些应用场景：\n\n* 序列化与反序列化\n\n## 2.Java 的 I/O 类库的基本架构\nJava 的 I/O 操作类在包 java.io 下，大概有将近 80 个类，但是这些类大概可以分成四组，分别是：\n\n* 基于字节操作的 I/O 接口：InputStream 和 OutputStream\n* 基于字符操作的 I/O 接口：Writer 和 Reader\n* 基于磁盘操作的 I/O 接口：File\n* 基于网络操作的 I/O 接口：Socket\n\n前两组主要是根据传输数据的数据格式，后两组主要是根据传输数据的方式，虽然 Socket 类并不在 java.io 包下，但是我仍然把它们划分在一起。\n\n### 2.1 基于字节操作的 I/O 接口\n基于字节的 I/O 操作接口输入和输出分别是：InputStream 和 OutputStream。\n{% asset_img inputstream.png  InputStream 相关类层次结构%}\n\n{% asset_img outputstream.png OutputStream%}\n\n### 2.2基于字符的 I/O 操作接口\n不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符，所以 I/O 操作的都是字节而不是字符，但是为啥有操作字符的 I/O 接口呢？这是因为我们的程序中通常操作的数据都是以字符形式，为了操作方便当然要提供一个直接写字符的 I/O 接口，如此而已。基于字节的 I/O 操作接口读和写分别是：Reader 和 Writer。\n{% asset_img reader.png Reader相关类层次结构 %}\n\n{% asset_img writer.png Writer相关类层次结构 %}\n\n### 2.3 基于磁盘操作的 I/O 接口\n前面介绍了基本的 Java I/O 的操作接口，这些接口主要定义了如何操作数据，以及介绍了操作两种数据结构：字节和字符的方式。还有一个关键问题就是数据写到何处，其中一个主要方式就是将数据持久化到物理磁盘，下面将介绍如何将数据持久化到物理磁盘的过程。\n\n我们知道数据在磁盘的唯一最小描述就是文件，也就是说上层应用程序只能通过文件来操作磁盘上的数据，文件也是操作系统和磁盘驱动器交互的一个最小单元。值得注意的是 Java 中通常的 File 并不代表一个真实存在的文件对象，当你通过指定一个路径描述符时，它就会返回一个代表这个路径相关联的一个虚拟对象，这个可能是一个真实存在的文件或者是一个包含多个文件的目录。为何要这样设计？因为大部分情况下，我们并不关心这个文件是否真的存在，而是关心这个文件到底如何操作。例如我们手机里通常存了几百个朋友的电话号码，但是我们通常关心的是我有没有这个朋友的电话号码，或者这个电话号码是什么，但是这个电话号码到底能不能打通，我们并不是时时刻刻都去检查，而只有在真正要给他打电话时才会看这个电话能不能用。也就是使用这个电话记录要比打这个电话的次数多很多。\n何时真正会要检查一个文件存不存？就是在真正要读取这个文件时，例如 FileInputStream 类都是操作一个文件的接口，注意到在创建一个 FileInputStream 对象时，会创建一个 FileDescriptor 对象，其实这个对象就是真正代表一个存在的文件对象的描述，当我们在操作一个文件对象时可以通过 getFD() 方法获取真正操作的与底层操作系统关联的文件描述。例如可以调用 FileDescriptor.sync() 方法将操作系统缓存中的数据强制刷新到物理磁盘中。\n\n下面以清单 1 的程序为例，介绍下如何从磁盘读取一段文本字符。如下图所示：\n{% asset_img file.jpg 从磁盘读取文件%}\n\n### 2.4基于网络操作的 I/O 接口\nSocket 这个概念没有对应到一个具体的实体，它是描述计算机之间完成相互通信一种抽象功能。打个比方，可以把 Socket 比作为两个城市之间的交通工具，有了它，就可以在城市之间来回穿梭了。交通工具有多种，每种交通工具也有相应的交通规则。Socket 也一样，也有多种。大部分情况下我们使用的都是基于 TCP/IP 的流套接字，它是一种稳定的通信协议。\n下图是典型的基于 Socket 的通信的场景：\n\n{% asset_img socket.jpg Socket 通信示例 %}\n\n\n主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接，而建立 Socket 连接必须需要底层 TCP/IP 协议来建立 TCP 连接。建立 TCP 连接需要底层 IP 协议来寻址网络中的主机。我们知道网络层使用的 IP 协议可以帮助我们根据 IP 地址来找到目标主机，但是一台主机上可能运行着多个应用程序，如何才能与指定的应用程序通信就要通过 TCP 或 UPD 的地址也就是端口号来指定。这样就可以通过一个 Socket 实例唯一代表一个主机上的一个应用程序的通信链路了。\n#### 建立通信链路\n当客户端要与服务端通信，客户端首先要创建一个 Socket 实例，操作系统将为这个 Socket 实例分配一个没有被使用的本地端口号，并创建一个包含本地和远程地址和端口号的套接字数据结构，这个数据结构将一直保存在系统中直到这个连接关闭。在创建 Socket 实例的构造函数正确返回之前，将要进行 TCP 的三次握手协议，TCP 握手协议完成后，Socket 实例对象将创建完成，否则将抛出 IOException 错误。\n与之对应的服务端将创建一个 ServerSocket 实例，ServerSocket 创建比较简单只要指定的端口号没有被占用，一般实例创建都会成功，同时操作系统也会为 ServerSocket 实例创建一个底层数据结构，这个数据结构中包含指定监听的端口号和包含监听地址的通配符，通常情况下都是“*”即监听所有地址。之后当调用 accept() 方法时，将进入阻塞状态，等待客户端的请求。当一个新的请求到来时，将为这个连接创建一个新的套接字数据结构，该套接字数据的信息包含的地址和端口信息正是请求源地址和端口。这个新创建的数据结构将会关联到 ServerSocket 实例的一个未完成的连接数据结构列表中，注意这时服务端与之对应的 Socket 实例并没有完成创建，而要等到与客户端的三次握手完成后，这个服务端的 Socket 实例才会返回，并将这个 Socket 实例对应的数据结构从未完成列表中移到已完成列表中。所以 ServerSocket 所关联的列表中每个数据结构，都代表与一个客户端的建立的 TCP 连接。\n#### 数据传输\n传输数据是我们建立连接的主要目的，如何通过 Socket 传输数据，下面将详细介绍。\n当连接已经建立成功，服务端和客户端都会拥有一个 Socket 实例，每个 Socket 实例都有一个 InputStream 和 OutputStream，正是通过这两个对象来交换数据。同时我们也知道网络 I/O 都是以字节流传输的。当 Socket 对象创建时，操作系统将会为 InputStream 和 OutputStream 分别分配一定大小的缓冲区，数据的写入和读取都是通过这个缓存区完成的。写入端将数据写到 OutputStream 对应的 SendQ 队列中，当队列填满时，数据将被发送到另一端 InputStream 的 RecvQ 队列中，如果这时 RecvQ 已经满了，那么 OutputStream 的 write 方法将会阻塞直到 RecvQ 队列有足够的空间容纳 SendQ 发送的数据。值得特别注意的是，这个缓存区的大小以及写入端的速度和读取端的速度非常影响这个连接的数据传输效率，由于可能会发生阻塞，所以网络 I/O 与磁盘 I/O 在数据的写入和读取还要有一个协调的过程，如果两边同时传送数据时可能会产生死锁，在后面 NIO 部分将介绍避免这种情况。","slug":"Java-IO","published":1,"date":"2017-02-27T13:48:02.783Z","updated":"2017-02-27T13:48:02.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjy5xv0004wp2dnso6kxf8","content":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>讲一讲Java I/O的一些事情。因为I/O问题很容易出现性能瓶颈，但我们在具体的开发过程中，却很少涉及到I/O之类的操作,那是因为涉及到的大部分I/O操作都被封装了起来，不被我们所感知，如：</p>\n<ul>\n<li>图片库</li>\n<li>SharedPreferences</li>\n</ul>\n<p>还有一些应用场景：</p>\n<ul>\n<li>序列化与反序列化</li>\n</ul>\n<h2 id=\"2-Java-的-I-O-类库的基本架构\"><a href=\"#2-Java-的-I-O-类库的基本架构\" class=\"headerlink\" title=\"2.Java 的 I/O 类库的基本架构\"></a>2.Java 的 I/O 类库的基本架构</h2><p>Java 的 I/O 操作类在包 java.io 下，大概有将近 80 个类，但是这些类大概可以分成四组，分别是：</p>\n<ul>\n<li>基于字节操作的 I/O 接口：InputStream 和 OutputStream</li>\n<li>基于字符操作的 I/O 接口：Writer 和 Reader</li>\n<li>基于磁盘操作的 I/O 接口：File</li>\n<li>基于网络操作的 I/O 接口：Socket</li>\n</ul>\n<p>前两组主要是根据传输数据的数据格式，后两组主要是根据传输数据的方式，虽然 Socket 类并不在 java.io 包下，但是我仍然把它们划分在一起。</p>\n<h3 id=\"2-1-基于字节操作的-I-O-接口\"><a href=\"#2-1-基于字节操作的-I-O-接口\" class=\"headerlink\" title=\"2.1 基于字节操作的 I/O 接口\"></a>2.1 基于字节操作的 I/O 接口</h3><p>基于字节的 I/O 操作接口输入和输出分别是：InputStream 和 OutputStream。<br><img src=\"/2017/02/27/Java-IO/inputstream.png\" alt=\"InputStream 相关类层次结构\" title=\"InputStream 相关类层次结构\"></p>\n<img src=\"/2017/02/27/Java-IO/outputstream.png\" alt=\"OutputStream\" title=\"OutputStream\">\n<h3 id=\"2-2基于字符的-I-O-操作接口\"><a href=\"#2-2基于字符的-I-O-操作接口\" class=\"headerlink\" title=\"2.2基于字符的 I/O 操作接口\"></a>2.2基于字符的 I/O 操作接口</h3><p>不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符，所以 I/O 操作的都是字节而不是字符，但是为啥有操作字符的 I/O 接口呢？这是因为我们的程序中通常操作的数据都是以字符形式，为了操作方便当然要提供一个直接写字符的 I/O 接口，如此而已。基于字节的 I/O 操作接口读和写分别是：Reader 和 Writer。<br><img src=\"/2017/02/27/Java-IO/reader.png\" alt=\"Reader相关类层次结构\" title=\"Reader相关类层次结构\"></p>\n<img src=\"/2017/02/27/Java-IO/writer.png\" alt=\"Writer相关类层次结构\" title=\"Writer相关类层次结构\">\n<h3 id=\"2-3-基于磁盘操作的-I-O-接口\"><a href=\"#2-3-基于磁盘操作的-I-O-接口\" class=\"headerlink\" title=\"2.3 基于磁盘操作的 I/O 接口\"></a>2.3 基于磁盘操作的 I/O 接口</h3><p>前面介绍了基本的 Java I/O 的操作接口，这些接口主要定义了如何操作数据，以及介绍了操作两种数据结构：字节和字符的方式。还有一个关键问题就是数据写到何处，其中一个主要方式就是将数据持久化到物理磁盘，下面将介绍如何将数据持久化到物理磁盘的过程。</p>\n<p>我们知道数据在磁盘的唯一最小描述就是文件，也就是说上层应用程序只能通过文件来操作磁盘上的数据，文件也是操作系统和磁盘驱动器交互的一个最小单元。值得注意的是 Java 中通常的 File 并不代表一个真实存在的文件对象，当你通过指定一个路径描述符时，它就会返回一个代表这个路径相关联的一个虚拟对象，这个可能是一个真实存在的文件或者是一个包含多个文件的目录。为何要这样设计？因为大部分情况下，我们并不关心这个文件是否真的存在，而是关心这个文件到底如何操作。例如我们手机里通常存了几百个朋友的电话号码，但是我们通常关心的是我有没有这个朋友的电话号码，或者这个电话号码是什么，但是这个电话号码到底能不能打通，我们并不是时时刻刻都去检查，而只有在真正要给他打电话时才会看这个电话能不能用。也就是使用这个电话记录要比打这个电话的次数多很多。<br>何时真正会要检查一个文件存不存？就是在真正要读取这个文件时，例如 FileInputStream 类都是操作一个文件的接口，注意到在创建一个 FileInputStream 对象时，会创建一个 FileDescriptor 对象，其实这个对象就是真正代表一个存在的文件对象的描述，当我们在操作一个文件对象时可以通过 getFD() 方法获取真正操作的与底层操作系统关联的文件描述。例如可以调用 FileDescriptor.sync() 方法将操作系统缓存中的数据强制刷新到物理磁盘中。</p>\n<p>下面以清单 1 的程序为例，介绍下如何从磁盘读取一段文本字符。如下图所示：<br><img src=\"/2017/02/27/Java-IO/file.jpg\" alt=\"从磁盘读取文件\" title=\"从磁盘读取文件\"></p>\n<h3 id=\"2-4基于网络操作的-I-O-接口\"><a href=\"#2-4基于网络操作的-I-O-接口\" class=\"headerlink\" title=\"2.4基于网络操作的 I/O 接口\"></a>2.4基于网络操作的 I/O 接口</h3><p>Socket 这个概念没有对应到一个具体的实体，它是描述计算机之间完成相互通信一种抽象功能。打个比方，可以把 Socket 比作为两个城市之间的交通工具，有了它，就可以在城市之间来回穿梭了。交通工具有多种，每种交通工具也有相应的交通规则。Socket 也一样，也有多种。大部分情况下我们使用的都是基于 TCP/IP 的流套接字，它是一种稳定的通信协议。<br>下图是典型的基于 Socket 的通信的场景：</p>\n<img src=\"/2017/02/27/Java-IO/socket.jpg\" alt=\"Socket 通信示例\" title=\"Socket 通信示例\">\n<p>主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接，而建立 Socket 连接必须需要底层 TCP/IP 协议来建立 TCP 连接。建立 TCP 连接需要底层 IP 协议来寻址网络中的主机。我们知道网络层使用的 IP 协议可以帮助我们根据 IP 地址来找到目标主机，但是一台主机上可能运行着多个应用程序，如何才能与指定的应用程序通信就要通过 TCP 或 UPD 的地址也就是端口号来指定。这样就可以通过一个 Socket 实例唯一代表一个主机上的一个应用程序的通信链路了。</p>\n<h4 id=\"建立通信链路\"><a href=\"#建立通信链路\" class=\"headerlink\" title=\"建立通信链路\"></a>建立通信链路</h4><p>当客户端要与服务端通信，客户端首先要创建一个 Socket 实例，操作系统将为这个 Socket 实例分配一个没有被使用的本地端口号，并创建一个包含本地和远程地址和端口号的套接字数据结构，这个数据结构将一直保存在系统中直到这个连接关闭。在创建 Socket 实例的构造函数正确返回之前，将要进行 TCP 的三次握手协议，TCP 握手协议完成后，Socket 实例对象将创建完成，否则将抛出 IOException 错误。<br>与之对应的服务端将创建一个 ServerSocket 实例，ServerSocket 创建比较简单只要指定的端口号没有被占用，一般实例创建都会成功，同时操作系统也会为 ServerSocket 实例创建一个底层数据结构，这个数据结构中包含指定监听的端口号和包含监听地址的通配符，通常情况下都是“*”即监听所有地址。之后当调用 accept() 方法时，将进入阻塞状态，等待客户端的请求。当一个新的请求到来时，将为这个连接创建一个新的套接字数据结构，该套接字数据的信息包含的地址和端口信息正是请求源地址和端口。这个新创建的数据结构将会关联到 ServerSocket 实例的一个未完成的连接数据结构列表中，注意这时服务端与之对应的 Socket 实例并没有完成创建，而要等到与客户端的三次握手完成后，这个服务端的 Socket 实例才会返回，并将这个 Socket 实例对应的数据结构从未完成列表中移到已完成列表中。所以 ServerSocket 所关联的列表中每个数据结构，都代表与一个客户端的建立的 TCP 连接。</p>\n<h4 id=\"数据传输\"><a href=\"#数据传输\" class=\"headerlink\" title=\"数据传输\"></a>数据传输</h4><p>传输数据是我们建立连接的主要目的，如何通过 Socket 传输数据，下面将详细介绍。<br>当连接已经建立成功，服务端和客户端都会拥有一个 Socket 实例，每个 Socket 实例都有一个 InputStream 和 OutputStream，正是通过这两个对象来交换数据。同时我们也知道网络 I/O 都是以字节流传输的。当 Socket 对象创建时，操作系统将会为 InputStream 和 OutputStream 分别分配一定大小的缓冲区，数据的写入和读取都是通过这个缓存区完成的。写入端将数据写到 OutputStream 对应的 SendQ 队列中，当队列填满时，数据将被发送到另一端 InputStream 的 RecvQ 队列中，如果这时 RecvQ 已经满了，那么 OutputStream 的 write 方法将会阻塞直到 RecvQ 队列有足够的空间容纳 SendQ 发送的数据。值得特别注意的是，这个缓存区的大小以及写入端的速度和读取端的速度非常影响这个连接的数据传输效率，由于可能会发生阻塞，所以网络 I/O 与磁盘 I/O 在数据的写入和读取还要有一个协调的过程，如果两边同时传送数据时可能会产生死锁，在后面 NIO 部分将介绍避免这种情况。</p>\n","excerpt":"","more":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>讲一讲Java I/O的一些事情。因为I/O问题很容易出现性能瓶颈，但我们在具体的开发过程中，却很少涉及到I/O之类的操作,那是因为涉及到的大部分I/O操作都被封装了起来，不被我们所感知，如：</p>\n<ul>\n<li>图片库</li>\n<li>SharedPreferences</li>\n</ul>\n<p>还有一些应用场景：</p>\n<ul>\n<li>序列化与反序列化</li>\n</ul>\n<h2 id=\"2-Java-的-I-O-类库的基本架构\"><a href=\"#2-Java-的-I-O-类库的基本架构\" class=\"headerlink\" title=\"2.Java 的 I/O 类库的基本架构\"></a>2.Java 的 I/O 类库的基本架构</h2><p>Java 的 I/O 操作类在包 java.io 下，大概有将近 80 个类，但是这些类大概可以分成四组，分别是：</p>\n<ul>\n<li>基于字节操作的 I/O 接口：InputStream 和 OutputStream</li>\n<li>基于字符操作的 I/O 接口：Writer 和 Reader</li>\n<li>基于磁盘操作的 I/O 接口：File</li>\n<li>基于网络操作的 I/O 接口：Socket</li>\n</ul>\n<p>前两组主要是根据传输数据的数据格式，后两组主要是根据传输数据的方式，虽然 Socket 类并不在 java.io 包下，但是我仍然把它们划分在一起。</p>\n<h3 id=\"2-1-基于字节操作的-I-O-接口\"><a href=\"#2-1-基于字节操作的-I-O-接口\" class=\"headerlink\" title=\"2.1 基于字节操作的 I/O 接口\"></a>2.1 基于字节操作的 I/O 接口</h3><p>基于字节的 I/O 操作接口输入和输出分别是：InputStream 和 OutputStream。<br><img src=\"/2017/02/27/Java-IO/inputstream.png\" alt=\"InputStream 相关类层次结构\" title=\"InputStream 相关类层次结构\"></p>\n<img src=\"/2017/02/27/Java-IO/outputstream.png\" alt=\"OutputStream\" title=\"OutputStream\">\n<h3 id=\"2-2基于字符的-I-O-操作接口\"><a href=\"#2-2基于字符的-I-O-操作接口\" class=\"headerlink\" title=\"2.2基于字符的 I/O 操作接口\"></a>2.2基于字符的 I/O 操作接口</h3><p>不管是磁盘还是网络传输，最小的存储单元都是字节，而不是字符，所以 I/O 操作的都是字节而不是字符，但是为啥有操作字符的 I/O 接口呢？这是因为我们的程序中通常操作的数据都是以字符形式，为了操作方便当然要提供一个直接写字符的 I/O 接口，如此而已。基于字节的 I/O 操作接口读和写分别是：Reader 和 Writer。<br><img src=\"/2017/02/27/Java-IO/reader.png\" alt=\"Reader相关类层次结构\" title=\"Reader相关类层次结构\"></p>\n<img src=\"/2017/02/27/Java-IO/writer.png\" alt=\"Writer相关类层次结构\" title=\"Writer相关类层次结构\">\n<h3 id=\"2-3-基于磁盘操作的-I-O-接口\"><a href=\"#2-3-基于磁盘操作的-I-O-接口\" class=\"headerlink\" title=\"2.3 基于磁盘操作的 I/O 接口\"></a>2.3 基于磁盘操作的 I/O 接口</h3><p>前面介绍了基本的 Java I/O 的操作接口，这些接口主要定义了如何操作数据，以及介绍了操作两种数据结构：字节和字符的方式。还有一个关键问题就是数据写到何处，其中一个主要方式就是将数据持久化到物理磁盘，下面将介绍如何将数据持久化到物理磁盘的过程。</p>\n<p>我们知道数据在磁盘的唯一最小描述就是文件，也就是说上层应用程序只能通过文件来操作磁盘上的数据，文件也是操作系统和磁盘驱动器交互的一个最小单元。值得注意的是 Java 中通常的 File 并不代表一个真实存在的文件对象，当你通过指定一个路径描述符时，它就会返回一个代表这个路径相关联的一个虚拟对象，这个可能是一个真实存在的文件或者是一个包含多个文件的目录。为何要这样设计？因为大部分情况下，我们并不关心这个文件是否真的存在，而是关心这个文件到底如何操作。例如我们手机里通常存了几百个朋友的电话号码，但是我们通常关心的是我有没有这个朋友的电话号码，或者这个电话号码是什么，但是这个电话号码到底能不能打通，我们并不是时时刻刻都去检查，而只有在真正要给他打电话时才会看这个电话能不能用。也就是使用这个电话记录要比打这个电话的次数多很多。<br>何时真正会要检查一个文件存不存？就是在真正要读取这个文件时，例如 FileInputStream 类都是操作一个文件的接口，注意到在创建一个 FileInputStream 对象时，会创建一个 FileDescriptor 对象，其实这个对象就是真正代表一个存在的文件对象的描述，当我们在操作一个文件对象时可以通过 getFD() 方法获取真正操作的与底层操作系统关联的文件描述。例如可以调用 FileDescriptor.sync() 方法将操作系统缓存中的数据强制刷新到物理磁盘中。</p>\n<p>下面以清单 1 的程序为例，介绍下如何从磁盘读取一段文本字符。如下图所示：<br><img src=\"/2017/02/27/Java-IO/file.jpg\" alt=\"从磁盘读取文件\" title=\"从磁盘读取文件\"></p>\n<h3 id=\"2-4基于网络操作的-I-O-接口\"><a href=\"#2-4基于网络操作的-I-O-接口\" class=\"headerlink\" title=\"2.4基于网络操作的 I/O 接口\"></a>2.4基于网络操作的 I/O 接口</h3><p>Socket 这个概念没有对应到一个具体的实体，它是描述计算机之间完成相互通信一种抽象功能。打个比方，可以把 Socket 比作为两个城市之间的交通工具，有了它，就可以在城市之间来回穿梭了。交通工具有多种，每种交通工具也有相应的交通规则。Socket 也一样，也有多种。大部分情况下我们使用的都是基于 TCP/IP 的流套接字，它是一种稳定的通信协议。<br>下图是典型的基于 Socket 的通信的场景：</p>\n<img src=\"/2017/02/27/Java-IO/socket.jpg\" alt=\"Socket 通信示例\" title=\"Socket 通信示例\">\n<p>主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接，而建立 Socket 连接必须需要底层 TCP/IP 协议来建立 TCP 连接。建立 TCP 连接需要底层 IP 协议来寻址网络中的主机。我们知道网络层使用的 IP 协议可以帮助我们根据 IP 地址来找到目标主机，但是一台主机上可能运行着多个应用程序，如何才能与指定的应用程序通信就要通过 TCP 或 UPD 的地址也就是端口号来指定。这样就可以通过一个 Socket 实例唯一代表一个主机上的一个应用程序的通信链路了。</p>\n<h4 id=\"建立通信链路\"><a href=\"#建立通信链路\" class=\"headerlink\" title=\"建立通信链路\"></a>建立通信链路</h4><p>当客户端要与服务端通信，客户端首先要创建一个 Socket 实例，操作系统将为这个 Socket 实例分配一个没有被使用的本地端口号，并创建一个包含本地和远程地址和端口号的套接字数据结构，这个数据结构将一直保存在系统中直到这个连接关闭。在创建 Socket 实例的构造函数正确返回之前，将要进行 TCP 的三次握手协议，TCP 握手协议完成后，Socket 实例对象将创建完成，否则将抛出 IOException 错误。<br>与之对应的服务端将创建一个 ServerSocket 实例，ServerSocket 创建比较简单只要指定的端口号没有被占用，一般实例创建都会成功，同时操作系统也会为 ServerSocket 实例创建一个底层数据结构，这个数据结构中包含指定监听的端口号和包含监听地址的通配符，通常情况下都是“*”即监听所有地址。之后当调用 accept() 方法时，将进入阻塞状态，等待客户端的请求。当一个新的请求到来时，将为这个连接创建一个新的套接字数据结构，该套接字数据的信息包含的地址和端口信息正是请求源地址和端口。这个新创建的数据结构将会关联到 ServerSocket 实例的一个未完成的连接数据结构列表中，注意这时服务端与之对应的 Socket 实例并没有完成创建，而要等到与客户端的三次握手完成后，这个服务端的 Socket 实例才会返回，并将这个 Socket 实例对应的数据结构从未完成列表中移到已完成列表中。所以 ServerSocket 所关联的列表中每个数据结构，都代表与一个客户端的建立的 TCP 连接。</p>\n<h4 id=\"数据传输\"><a href=\"#数据传输\" class=\"headerlink\" title=\"数据传输\"></a>数据传输</h4><p>传输数据是我们建立连接的主要目的，如何通过 Socket 传输数据，下面将详细介绍。<br>当连接已经建立成功，服务端和客户端都会拥有一个 Socket 实例，每个 Socket 实例都有一个 InputStream 和 OutputStream，正是通过这两个对象来交换数据。同时我们也知道网络 I/O 都是以字节流传输的。当 Socket 对象创建时，操作系统将会为 InputStream 和 OutputStream 分别分配一定大小的缓冲区，数据的写入和读取都是通过这个缓存区完成的。写入端将数据写到 OutputStream 对应的 SendQ 队列中，当队列填满时，数据将被发送到另一端 InputStream 的 RecvQ 队列中，如果这时 RecvQ 已经满了，那么 OutputStream 的 write 方法将会阻塞直到 RecvQ 队列有足够的空间容纳 SendQ 发送的数据。值得特别注意的是，这个缓存区的大小以及写入端的速度和读取端的速度非常影响这个连接的数据传输效率，由于可能会发生阻塞，所以网络 I/O 与磁盘 I/O 在数据的写入和读取还要有一个协调的过程，如果两边同时传送数据时可能会产生死锁，在后面 NIO 部分将介绍避免这种情况。</p>\n"},{"title":"Android在Ubuntu上配置NDK的环境","_content":"由于自己一直在使用Ubuntu，所以Android的开发环境也在Ubuntu上搭建，在开发过程中，需要用到Android的交叉编译，所以把Android在Ubuntu上配置NDK环境的步骤记录一下。\n## 1.下载Android NDK压缩包\n[官网下载](https://developer.android.com/ndk/downloads/index.html)\nNDK有不同的版本，这里根据需要下载不同的版本。\n## 2.解压\n把第1部下载的压缩包解压，我这里存放的目录如下：\n```\n/home/kl/android-sdk-linux/android-nkd-r13b\n```\n## 3. 设置环境变量\n执行如下命令\n```\n$ sudo vim ~/.bashrc\n```\n然后经如下几句加进去：\n```\nexport ANDROID_HOME=\"/home/kl/android-sdk-linux\"\nexport PATH=\"$PATH:$ANDROID_NDK\"\n```\n关闭terminal，在打开就设置成功了，在验证一下是否成功：\n```\n$ ndk-build -v\nGNU Make 3.81\nCopyright (C) 2006  Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.\n\nThis program built for x86_64-pc-linux-gnu\n```","source":"_posts/Ubuntu-Android-NDK.md","raw":"---\ntitle: Android在Ubuntu上配置NDK的环境\ncategories: Android\ntags: Ubuntu,Android\n---\n由于自己一直在使用Ubuntu，所以Android的开发环境也在Ubuntu上搭建，在开发过程中，需要用到Android的交叉编译，所以把Android在Ubuntu上配置NDK环境的步骤记录一下。\n## 1.下载Android NDK压缩包\n[官网下载](https://developer.android.com/ndk/downloads/index.html)\nNDK有不同的版本，这里根据需要下载不同的版本。\n## 2.解压\n把第1部下载的压缩包解压，我这里存放的目录如下：\n```\n/home/kl/android-sdk-linux/android-nkd-r13b\n```\n## 3. 设置环境变量\n执行如下命令\n```\n$ sudo vim ~/.bashrc\n```\n然后经如下几句加进去：\n```\nexport ANDROID_HOME=\"/home/kl/android-sdk-linux\"\nexport PATH=\"$PATH:$ANDROID_NDK\"\n```\n关闭terminal，在打开就设置成功了，在验证一下是否成功：\n```\n$ ndk-build -v\nGNU Make 3.81\nCopyright (C) 2006  Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.\nThere is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.\n\nThis program built for x86_64-pc-linux-gnu\n```","slug":"Ubuntu-Android-NDK","published":1,"date":"2017-02-26T09:11:22.469Z","updated":"2017-02-26T09:11:22.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjy5xy0005wp2diozzfaxv","content":"<p>由于自己一直在使用Ubuntu，所以Android的开发环境也在Ubuntu上搭建，在开发过程中，需要用到Android的交叉编译，所以把Android在Ubuntu上配置NDK环境的步骤记录一下。</p>\n<h2 id=\"1-下载Android-NDK压缩包\"><a href=\"#1-下载Android-NDK压缩包\" class=\"headerlink\" title=\"1.下载Android NDK压缩包\"></a>1.下载Android NDK压缩包</h2><p><a href=\"https://developer.android.com/ndk/downloads/index.html\" target=\"_blank\" rel=\"external\">官网下载</a><br>NDK有不同的版本，这里根据需要下载不同的版本。</p>\n<h2 id=\"2-解压\"><a href=\"#2-解压\" class=\"headerlink\" title=\"2.解压\"></a>2.解压</h2><p>把第1部下载的压缩包解压，我这里存放的目录如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/home/kl/android-sdk-linux/android-nkd-r13b</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-设置环境变量\"><a href=\"#3-设置环境变量\" class=\"headerlink\" title=\"3. 设置环境变量\"></a>3. 设置环境变量</h2><p>执行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo vim ~/.bashrc</div></pre></td></tr></table></figure></p>\n<p>然后经如下几句加进去：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=&quot;/home/kl/android-sdk-linux&quot;</div><div class=\"line\">export PATH=&quot;$PATH:$ANDROID_NDK&quot;</div></pre></td></tr></table></figure></p>\n<p>关闭terminal，在打开就设置成功了，在验证一下是否成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ndk-build -v</div><div class=\"line\">GNU Make 3.81</div><div class=\"line\">Copyright (C) 2006  Free Software Foundation, Inc.</div><div class=\"line\">This is free software; see the source for copying conditions.</div><div class=\"line\">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</div><div class=\"line\">PARTICULAR PURPOSE.</div><div class=\"line\"></div><div class=\"line\">This program built for x86_64-pc-linux-gnu</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>由于自己一直在使用Ubuntu，所以Android的开发环境也在Ubuntu上搭建，在开发过程中，需要用到Android的交叉编译，所以把Android在Ubuntu上配置NDK环境的步骤记录一下。</p>\n<h2 id=\"1-下载Android-NDK压缩包\"><a href=\"#1-下载Android-NDK压缩包\" class=\"headerlink\" title=\"1.下载Android NDK压缩包\"></a>1.下载Android NDK压缩包</h2><p><a href=\"https://developer.android.com/ndk/downloads/index.html\">官网下载</a><br>NDK有不同的版本，这里根据需要下载不同的版本。</p>\n<h2 id=\"2-解压\"><a href=\"#2-解压\" class=\"headerlink\" title=\"2.解压\"></a>2.解压</h2><p>把第1部下载的压缩包解压，我这里存放的目录如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/home/kl/android-sdk-linux/android-nkd-r13b</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-设置环境变量\"><a href=\"#3-设置环境变量\" class=\"headerlink\" title=\"3. 设置环境变量\"></a>3. 设置环境变量</h2><p>执行如下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo vim ~/.bashrc</div></pre></td></tr></table></figure></p>\n<p>然后经如下几句加进去：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=&quot;/home/kl/android-sdk-linux&quot;</div><div class=\"line\">export PATH=&quot;$PATH:$ANDROID_NDK&quot;</div></pre></td></tr></table></figure></p>\n<p>关闭terminal，在打开就设置成功了，在验证一下是否成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ndk-build -v</div><div class=\"line\">GNU Make 3.81</div><div class=\"line\">Copyright (C) 2006  Free Software Foundation, Inc.</div><div class=\"line\">This is free software; see the source for copying conditions.</div><div class=\"line\">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</div><div class=\"line\">PARTICULAR PURPOSE.</div><div class=\"line\"></div><div class=\"line\">This program built for x86_64-pc-linux-gnu</div></pre></td></tr></table></figure></p>\n"},{"title":"Ubuntu下设置环境变量的几种方法和区别","_content":" 在Ubuntu下设置环境变量的方法总是搞混，今天写下来可以以后多看看。\n## 1.通过文件设置Ubuntu环境变量\n首先是设置全局环境变量，对所有用户都会生效：\n\n* etc/profile: 此文件为系统的每个用户设置环境信息。当用户登录时，该文件被执行一次，并从 /etc/profile.d 目录的配置文件中搜集shell 的设置。一般用于设置所有用户使用的全局变量。\n* /etc/bashrc: 当 bash shell 被打开时，该文件被读取。也就是说，每次新打开一个终端 shell，该文件就会被读取。\n\n接着是与上述两个文件对应，但只对单个用户生效：\n\n* ~/.bash_profile 或 ~/.profile: 只对单个用户生效，当用户登录时该文件仅执行一次。用户可使用该文件添加自己使用的 shell 变量信息。另外在不同的LINUX操作系统下，这个文件可能是不同的，可能是 ~/.bash_profile， ~/.bash_login 或 ~/.profile 其中的一种或几种，如果存在几种的话，那么执行的顺序便是：~/.bash_profile、 ~/.bash_login、 ~/.profile。比如 Ubuntu 系统一般是 ~/.profile 文件。\n* ~/.bashrc: 只对单个用户生效，当登录以及每次打开新的 shell 时，该文件被读取。\n\n此外，修改 /etc/environment 这个文件也能实现环境变量的设置。/etc/environment 设置的也是全局变量，从文件本身的作用上来说， /etc/environment 设置的是整个系统的环境，而/etc/profile是设置所有用户的环境。有几点需注意：\n\n* 系统先读取 etc/enviornmen 再读取 /etc/profile（还是反过来？）\n* /etc/environment 中不能包含命令，即直接通过 VAR=\"...\" 的方式设置，不使用 export 。\n* 使用 source /etc/environment 可以使变量设置在当前窗口立即生效，需注销/重启之后，才能对每个新终端窗口都生效。\n\n## 2.通过 Shell 命令 export 修改 Linux 环境变量\n另一种修改 Linux 环境变量的方式就是通过 Shell 命令 export，注意变量名不要有美元号 $，赋值语句中才需要有：\n```\n$ export PATH=$PATH:/usr/local/hadoop/bin\n\nexport 方式只对当前终端 Shell 有效\n使用 export 设置的变量，只对当前终端 Shell 有效，也就是说如果新打开一个终端，那这个 export 设置的变量在新终端中使无法读取到的。适合设置一些临时变量。\n```\n\n","source":"_posts/Ubuntun-set-environment.md","raw":"---\ntitle: Ubuntu下设置环境变量的几种方法和区别\ncategories: Ubuntu\ntags: Ubuntu\n---\n 在Ubuntu下设置环境变量的方法总是搞混，今天写下来可以以后多看看。\n## 1.通过文件设置Ubuntu环境变量\n首先是设置全局环境变量，对所有用户都会生效：\n\n* etc/profile: 此文件为系统的每个用户设置环境信息。当用户登录时，该文件被执行一次，并从 /etc/profile.d 目录的配置文件中搜集shell 的设置。一般用于设置所有用户使用的全局变量。\n* /etc/bashrc: 当 bash shell 被打开时，该文件被读取。也就是说，每次新打开一个终端 shell，该文件就会被读取。\n\n接着是与上述两个文件对应，但只对单个用户生效：\n\n* ~/.bash_profile 或 ~/.profile: 只对单个用户生效，当用户登录时该文件仅执行一次。用户可使用该文件添加自己使用的 shell 变量信息。另外在不同的LINUX操作系统下，这个文件可能是不同的，可能是 ~/.bash_profile， ~/.bash_login 或 ~/.profile 其中的一种或几种，如果存在几种的话，那么执行的顺序便是：~/.bash_profile、 ~/.bash_login、 ~/.profile。比如 Ubuntu 系统一般是 ~/.profile 文件。\n* ~/.bashrc: 只对单个用户生效，当登录以及每次打开新的 shell 时，该文件被读取。\n\n此外，修改 /etc/environment 这个文件也能实现环境变量的设置。/etc/environment 设置的也是全局变量，从文件本身的作用上来说， /etc/environment 设置的是整个系统的环境，而/etc/profile是设置所有用户的环境。有几点需注意：\n\n* 系统先读取 etc/enviornmen 再读取 /etc/profile（还是反过来？）\n* /etc/environment 中不能包含命令，即直接通过 VAR=\"...\" 的方式设置，不使用 export 。\n* 使用 source /etc/environment 可以使变量设置在当前窗口立即生效，需注销/重启之后，才能对每个新终端窗口都生效。\n\n## 2.通过 Shell 命令 export 修改 Linux 环境变量\n另一种修改 Linux 环境变量的方式就是通过 Shell 命令 export，注意变量名不要有美元号 $，赋值语句中才需要有：\n```\n$ export PATH=$PATH:/usr/local/hadoop/bin\n\nexport 方式只对当前终端 Shell 有效\n使用 export 设置的变量，只对当前终端 Shell 有效，也就是说如果新打开一个终端，那这个 export 设置的变量在新终端中使无法读取到的。适合设置一些临时变量。\n```\n\n","slug":"Ubuntun-set-environment","published":1,"date":"2017-02-26T08:38:02.343Z","updated":"2017-02-26T08:38:02.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjy5yy000kwp2di51vnbo8","content":"<p> 在Ubuntu下设置环境变量的方法总是搞混，今天写下来可以以后多看看。</p>\n<h2 id=\"1-通过文件设置Ubuntu环境变量\"><a href=\"#1-通过文件设置Ubuntu环境变量\" class=\"headerlink\" title=\"1.通过文件设置Ubuntu环境变量\"></a>1.通过文件设置Ubuntu环境变量</h2><p>首先是设置全局环境变量，对所有用户都会生效：</p>\n<ul>\n<li>etc/profile: 此文件为系统的每个用户设置环境信息。当用户登录时，该文件被执行一次，并从 /etc/profile.d 目录的配置文件中搜集shell 的设置。一般用于设置所有用户使用的全局变量。</li>\n<li>/etc/bashrc: 当 bash shell 被打开时，该文件被读取。也就是说，每次新打开一个终端 shell，该文件就会被读取。</li>\n</ul>\n<p>接着是与上述两个文件对应，但只对单个用户生效：</p>\n<ul>\n<li>~/.bash_profile 或 ~/.profile: 只对单个用户生效，当用户登录时该文件仅执行一次。用户可使用该文件添加自己使用的 shell 变量信息。另外在不同的LINUX操作系统下，这个文件可能是不同的，可能是 ~/.bash_profile， ~/.bash_login 或 ~/.profile 其中的一种或几种，如果存在几种的话，那么执行的顺序便是：~/.bash_profile、 ~/.bash_login、 ~/.profile。比如 Ubuntu 系统一般是 ~/.profile 文件。</li>\n<li>~/.bashrc: 只对单个用户生效，当登录以及每次打开新的 shell 时，该文件被读取。</li>\n</ul>\n<p>此外，修改 /etc/environment 这个文件也能实现环境变量的设置。/etc/environment 设置的也是全局变量，从文件本身的作用上来说， /etc/environment 设置的是整个系统的环境，而/etc/profile是设置所有用户的环境。有几点需注意：</p>\n<ul>\n<li>系统先读取 etc/enviornmen 再读取 /etc/profile（还是反过来？）</li>\n<li>/etc/environment 中不能包含命令，即直接通过 VAR=”…” 的方式设置，不使用 export 。</li>\n<li>使用 source /etc/environment 可以使变量设置在当前窗口立即生效，需注销/重启之后，才能对每个新终端窗口都生效。</li>\n</ul>\n<h2 id=\"2-通过-Shell-命令-export-修改-Linux-环境变量\"><a href=\"#2-通过-Shell-命令-export-修改-Linux-环境变量\" class=\"headerlink\" title=\"2.通过 Shell 命令 export 修改 Linux 环境变量\"></a>2.通过 Shell 命令 export 修改 Linux 环境变量</h2><p>另一种修改 Linux 环境变量的方式就是通过 Shell 命令 export，注意变量名不要有美元号 $，赋值语句中才需要有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ export PATH=$PATH:/usr/local/hadoop/bin</div><div class=\"line\"></div><div class=\"line\">export 方式只对当前终端 Shell 有效</div><div class=\"line\">使用 export 设置的变量，只对当前终端 Shell 有效，也就是说如果新打开一个终端，那这个 export 设置的变量在新终端中使无法读取到的。适合设置一些临时变量。</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p> 在Ubuntu下设置环境变量的方法总是搞混，今天写下来可以以后多看看。</p>\n<h2 id=\"1-通过文件设置Ubuntu环境变量\"><a href=\"#1-通过文件设置Ubuntu环境变量\" class=\"headerlink\" title=\"1.通过文件设置Ubuntu环境变量\"></a>1.通过文件设置Ubuntu环境变量</h2><p>首先是设置全局环境变量，对所有用户都会生效：</p>\n<ul>\n<li>etc/profile: 此文件为系统的每个用户设置环境信息。当用户登录时，该文件被执行一次，并从 /etc/profile.d 目录的配置文件中搜集shell 的设置。一般用于设置所有用户使用的全局变量。</li>\n<li>/etc/bashrc: 当 bash shell 被打开时，该文件被读取。也就是说，每次新打开一个终端 shell，该文件就会被读取。</li>\n</ul>\n<p>接着是与上述两个文件对应，但只对单个用户生效：</p>\n<ul>\n<li>~/.bash_profile 或 ~/.profile: 只对单个用户生效，当用户登录时该文件仅执行一次。用户可使用该文件添加自己使用的 shell 变量信息。另外在不同的LINUX操作系统下，这个文件可能是不同的，可能是 ~/.bash_profile， ~/.bash_login 或 ~/.profile 其中的一种或几种，如果存在几种的话，那么执行的顺序便是：~/.bash_profile、 ~/.bash_login、 ~/.profile。比如 Ubuntu 系统一般是 ~/.profile 文件。</li>\n<li>~/.bashrc: 只对单个用户生效，当登录以及每次打开新的 shell 时，该文件被读取。</li>\n</ul>\n<p>此外，修改 /etc/environment 这个文件也能实现环境变量的设置。/etc/environment 设置的也是全局变量，从文件本身的作用上来说， /etc/environment 设置的是整个系统的环境，而/etc/profile是设置所有用户的环境。有几点需注意：</p>\n<ul>\n<li>系统先读取 etc/enviornmen 再读取 /etc/profile（还是反过来？）</li>\n<li>/etc/environment 中不能包含命令，即直接通过 VAR=”…” 的方式设置，不使用 export 。</li>\n<li>使用 source /etc/environment 可以使变量设置在当前窗口立即生效，需注销/重启之后，才能对每个新终端窗口都生效。</li>\n</ul>\n<h2 id=\"2-通过-Shell-命令-export-修改-Linux-环境变量\"><a href=\"#2-通过-Shell-命令-export-修改-Linux-环境变量\" class=\"headerlink\" title=\"2.通过 Shell 命令 export 修改 Linux 环境变量\"></a>2.通过 Shell 命令 export 修改 Linux 环境变量</h2><p>另一种修改 Linux 环境变量的方式就是通过 Shell 命令 export，注意变量名不要有美元号 $，赋值语句中才需要有：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ export PATH=$PATH:/usr/local/hadoop/bin</div><div class=\"line\"></div><div class=\"line\">export 方式只对当前终端 Shell 有效</div><div class=\"line\">使用 export 设置的变量，只对当前终端 Shell 有效，也就是说如果新打开一个终端，那这个 export 设置的变量在新终端中使无法读取到的。适合设置一些临时变量。</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[{"_id":"source/_posts/ByteArrayInputStream/bytearrayinputstream.png","slug":"bytearrayinputstream.png","post":"cizpjy5xk0000wp2dg6yjk6tw","modified":0,"renderable":0},{"_id":"source/_posts/ByteArrayInputStream/fileinputstream.png","slug":"fileinputstream.png","post":"cizpjy5xk0000wp2dg6yjk6tw","modified":0,"renderable":0},{"_id":"source/_posts/Java-IO/file.jpg","slug":"file.jpg","post":"cizpjy5xv0004wp2dnso6kxf8","modified":0,"renderable":0},{"_id":"source/_posts/Java-IO/inputstream.png","slug":"inputstream.png","post":"cizpjy5xv0004wp2dnso6kxf8","modified":0,"renderable":0},{"_id":"source/_posts/Java-IO/outputstream.png","slug":"outputstream.png","post":"cizpjy5xv0004wp2dnso6kxf8","modified":0,"renderable":0},{"_id":"source/_posts/Java-IO/reader.png","slug":"reader.png","post":"cizpjy5xv0004wp2dnso6kxf8","modified":0,"renderable":0},{"_id":"source/_posts/Java-IO/socket.jpg","slug":"socket.jpg","post":"cizpjy5xv0004wp2dnso6kxf8","modified":0,"renderable":0},{"_id":"source/_posts/Java-IO/writer.png","slug":"writer.png","post":"cizpjy5xv0004wp2dnso6kxf8","modified":0,"renderable":0},{"_id":"source/_posts/ByteArrayInputStream/filterinputstream.png","slug":"filterinputstream.png","post":"cizpjy5xk0000wp2dg6yjk6tw","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cizpjy5xk0000wp2dg6yjk6tw","category_id":"cizpjy5xs0002wp2ds59onx7y","_id":"cizpjy5y30009wp2dtsve3isv"},{"post_id":"cizpjy5xq0001wp2dmrgrlubs","category_id":"cizpjy5xz0006wp2dyom2pj4n","_id":"cizpjy5y5000dwp2dxpa9cefn"},{"post_id":"cizpjy5xv0004wp2dnso6kxf8","category_id":"cizpjy5y4000awp2d9w9rv82k","_id":"cizpjy5y6000hwp2dmgpevkak"},{"post_id":"cizpjy5xy0005wp2diozzfaxv","category_id":"cizpjy5y5000ewp2dujacqqq9","_id":"cizpjy5y6000jwp2dxcrvh9cl"},{"post_id":"cizpjy5yy000kwp2di51vnbo8","category_id":"cizpjy5z6000nwp2d9un3u13x","_id":"cizpjy5zb000swp2dheooj6ns"}],"PostTag":[{"post_id":"cizpjy5xk0000wp2dg6yjk6tw","tag_id":"cizpjy5xu0003wp2dd809f7kw","_id":"cizpjy5y10008wp2dzd24sx7u"},{"post_id":"cizpjy5xq0001wp2dmrgrlubs","tag_id":"cizpjy5y00007wp2dze4615lk","_id":"cizpjy5y5000cwp2dd50gk5u6"},{"post_id":"cizpjy5xv0004wp2dnso6kxf8","tag_id":"cizpjy5y4000bwp2diwarwk3b","_id":"cizpjy5y5000gwp2ds1k5s9jl"},{"post_id":"cizpjy5xy0005wp2diozzfaxv","tag_id":"cizpjy5y5000fwp2dxemy52ef","_id":"cizpjy5y6000iwp2dvpkxdcnj"},{"post_id":"cizpjy5yy000kwp2di51vnbo8","tag_id":"cizpjy5z6000owp2dhkq8ywkc","_id":"cizpjy5zb000rwp2dpuy0wwsl"}],"Tag":[{"name":"Java","_id":"cizpjy5xu0003wp2dd809f7kw"},{"name":"TensorFlow,Android","_id":"cizpjy5y00007wp2dze4615lk"},{"name":"Java,I/O","_id":"cizpjy5y4000bwp2diwarwk3b"},{"name":"Ubuntu,Android","_id":"cizpjy5y5000fwp2dxemy52ef"},{"name":"Ubuntu","_id":"cizpjy5z6000owp2dhkq8ywkc"}]}}